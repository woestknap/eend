/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.2 eend.gltf 
*/

import React, { useLayoutEffect, useRef } from 'react'
import { useGLTF, useScroll, Wireframe } from '@react-three/drei'
import gsap from "gsap";
import { useFrame } from '@react-three/fiber';
import { useState } from 'react';

export const FLOOR_HEIGHT = 0;
export const NB_FLOORS = 0;

export default function Eend(props) {
  const { nodes, materials } = useGLTF('/eend.gltf');
  const ref = useRef();
  const tl = useRef();
  const scroll = useScroll();
  const [isHovered, setIsHovered] = useState(false);

  useFrame(() => {
    tl.current.seek(scroll.offset * tl.current.duration());
  });

  useLayoutEffect(() => {
    tl.current = gsap.timeline();

    //VERTICAL ANIMATION
    tl.current.to(
      ref.current.position,
      {
        duration: 2,
      },
      0
    );

    //ROTATIONAL ANIMATION
    tl.current.to(
      ref.current.rotation,
      {
        duration: .8,
        y: Math.PI * 2 + .6,
      },
      0
    );
    tl.current.to(
      ref.current.rotation,
      {
        duration: .8,
        x: -2,
        z: -0.5,
      },
      1
    );

    //POSITIONAL ANIMATION
    tl.current.to(
      ref.current.position,
      {
        duration: .8,
        x: -1.6,
        z: 0,
      },
      0
    );
    tl.current.to(
      ref.current.position,
      {
        duration: .8,
        x: 1.6,
        z: 0,
        y: .1,
      },
      1.2
    );

  }, []);

  return (
    <group {...props} dispose={null} ref={ref}
      position={[1.6, -.65, 0]}
      rotation={[0.1, -.6, 0]}
      onPointerEnter={(event) => (event.stopPropagation(), setIsHovered(true))}
      onPointerLeave={() => (setIsHovered(false))}
      scale={30}
    >
      <mesh geometry={nodes.Retopo_eend015.geometry} material={materials['Material.007']}  >
      </mesh>
      <mesh geometry={nodes.Retopo_oog001.geometry} material={materials['Material.004']}  >
      </mesh>
      <mesh geometry={nodes.Retopo_iris001.geometry} material={materials['Material.005']}  >
      </mesh>
      <mesh geometry={nodes.Muts008.geometry} material={materials['Material.008']}  >
      </mesh>
      <mesh geometry={nodes.Retopo_eend013.geometry} material={materials['Material.002']}  >
      </mesh>
      <mesh geometry={nodes.snavelTop008.geometry} material={materials['Material.003']}  >
      </mesh>

    </group>
  )
}

useGLTF.preload('/eend.gltf')
